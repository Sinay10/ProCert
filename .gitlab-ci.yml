# GitLab CI/CD Pipeline for ProCert Infrastructure
# This pipeline handles testing, building, and deploying the ProCert system

stages:
  - validate
  - test
  - security
  - build
  - deploy

variables:
  # Python version
  PYTHON_VERSION: "3.11"
  # AWS region (can be overridden by CI/CD variable)
  AWS_DEFAULT_REGION: "us-east-1"
  # CDK CLI version (npm) - different from Python library version
  CDK_VERSION: "2.1024.0"

# Cache configuration for faster builds
cache:
  paths:
    - .venv/
    - node_modules/
    - .cache/pip

# Before script - common setup
before_script:
  - python --version
  - pip install --upgrade pip
  - python -m venv .venv
  - source .venv/bin/activate
  - pip install -r requirements.txt
  - pip install -r requirements-dev.txt

# ==================== VALIDATION STAGE ====================

lint-python:
  stage: validate
  image: python:${PYTHON_VERSION}
  script:
    - pip install flake8 black isort
    - echo "Running Python linting..."
    - flake8 shared/ lambda_src/ chatbot_lambda_src/ index_setup_lambda_src/ --max-line-length=120
    - echo "Checking code formatting..."
    - black --check shared/ lambda_src/ chatbot_lambda_src/ index_setup_lambda_src/
    - echo "Checking import sorting..."
    - isort --check-only shared/ lambda_src/ chatbot_lambda_src/ index_setup_lambda_src/
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

validate-cdk:
  stage: validate
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
    # Install Python and Node.js
    - apk add --no-cache python3 py3-pip nodejs npm curl bash
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install -r requirements.txt
    # Install CDK
    - npm install -g aws-cdk@${CDK_VERSION}
    # Wait for Docker to be ready
    - timeout 60 sh -c 'until docker info >/dev/null 2>&1; do sleep 2; done' || echo "Docker not ready, continuing anyway"
    - docker info || echo "Docker info failed"
  script:
    - echo "Validating CDK syntax..."
    - source .venv/bin/activate
    - cdk synth --all
    - echo "Running CDK diff..."
    - cdk diff || true
  artifacts:
    paths:
      - cdk.out/
    expire_in: 1 hour
  only:
    - merge_requests
    - main
    - develop

# ==================== TESTING STAGE ====================

unit-tests:
  stage: test
  image: python:${PYTHON_VERSION}
  services:
    - name: localstack/localstack:latest
      alias: localstack
  variables:
    LOCALSTACK_HOST: localstack
    AWS_ACCESS_KEY_ID: test
    AWS_SECRET_ACCESS_KEY: test
    AWS_DEFAULT_REGION: us-east-1
  script:
    - echo "Running unit tests..."
    - python -m pytest tests/unit/ -v --cov=shared --cov-report=xml --cov-report=html
    - echo "Test coverage report generated"
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week
  only:
    - merge_requests
    - main
    - develop

integration-tests:
  stage: test
  image: python:${PYTHON_VERSION}
  services:
    - name: localstack/localstack:latest
      alias: localstack
  variables:
    LOCALSTACK_HOST: localstack
    AWS_ACCESS_KEY_ID: test
    AWS_SECRET_ACCESS_KEY: test
  script:
    - echo "Running integration tests..."
    - python test_lambda_integration.py
    - python test_certification_extraction.py
    - python test_models.py
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

test-docker-bundling:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
    # Install Python and Node.js
    - apk add --no-cache python3 py3-pip nodejs npm curl bash
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install -r requirements.txt
    # Install CDK
    - npm install -g aws-cdk@${CDK_VERSION}
    # Wait for Docker to be ready
    - timeout 60 sh -c 'until docker info >/dev/null 2>&1; do sleep 2; done' || echo "Docker not ready, continuing anyway"
  script:
    - echo "Testing Docker bundling for Lambda functions..."
    - source .venv/bin/activate
    - python scripts/test_docker_bundling.py
  only:
    - merge_requests
    - main
    - develop

# ==================== SECURITY STAGE ====================

security-scan:
  stage: security
  image: python:${PYTHON_VERSION}
  script:
    - pip install bandit safety
    - echo "Running security scan with bandit..."
    - bandit -r shared/ lambda_src/ chatbot_lambda_src/ index_setup_lambda_src/ -f json -o bandit-report.json || true
    - echo "Checking for known security vulnerabilities..."
    - safety check --json --output safety-report.json || true
  artifacts:
    reports:
      sast: bandit-report.json
    paths:
      - bandit-report.json
      - safety-report.json
    expire_in: 1 week
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

# ==================== BUILD STAGE ====================

build-lambdas:
  stage: build
  image: python:${PYTHON_VERSION}
  script:
    - echo "Building Lambda packages..."
    - mkdir -p build/
    # Build ingestion lambda
    - cd lambda_src && zip -r ../build/ingestion-lambda.zip . && cd ..
    # Build chatbot lambda
    - cd chatbot_lambda_src && zip -r ../build/chatbot-lambda.zip . && cd ..
    # Build index setup lambda
    - cd index_setup_lambda_src && zip -r ../build/index-setup-lambda.zip . && cd ..
    - echo "Lambda packages built successfully"
  artifacts:
    paths:
      - build/
    expire_in: 1 day
  only:
    - main
    - develop
    - /^release\/.*$/

# ==================== DEPLOYMENT STAGE ====================

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
    AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID
  before_script:
    # Install Python, Node.js, and AWS CLI
    - apk add --no-cache python3 py3-pip nodejs npm curl bash
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install -r requirements.txt
    - pip install awscli
    # Install CDK
    - npm install -g aws-cdk@${CDK_VERSION}
    # Configure AWS credentials
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set default.region $AWS_DEFAULT_REGION
    # Wait for Docker to be ready
    - timeout 60 sh -c 'until docker info >/dev/null 2>&1; do sleep 2; done' || echo "Docker not ready, continuing anyway"
    - docker info || echo "Docker info failed"
  script:
    - echo "Deploying ProCert infrastructure..."
    - source .venv/bin/activate
    - cdk bootstrap aws://$AWS_ACCOUNT_ID/$AWS_DEFAULT_REGION
    - cdk deploy --all --require-approval never
    - echo "Deployment completed successfully"
  environment:
    name: development
    url: https://procert-dev.example.com
  only:
    - main
  when: manual
  allow_failure: false

# ==================== CLEANUP ====================

cleanup:
  stage: .post
  image: alpine:latest
  script:
    - echo "Cleaning up temporary files..."
    - rm -rf build/ || true
  when: always
  allow_failure: true